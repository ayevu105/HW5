Sun Dec  4 14:13:32 PST 2022
Linux csslab1 4.18.0-372.32.1.el8_6.x86_64 #1 SMP Thu Oct 27 15:18:36 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux
uid=1003642(ayevu105) gid=2121003642(ayevu105) groups=2121003642(ayevu105),605559(lab-access)
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
=====================================================
3. clang-tidy warnings are fixed
=====================================================
/home/NETID/ayevu105/HW5/comedy.cpp:33:14: error: out-of-line definition of 'SetTransactionData' does not match any declaration in 'Comedy'; did you mean 'setTransactionData'? [clang-diagnostic-error]
void Comedy::SetTransactionData(ifstream& FileName) {
             ^~~~~~~~~~~~~~~~~~
             setTransactionData
/home/NETID/ayevu105/HW5/comedy.h:29:14: note: 'setTransactionData' declared here
        void setTransactionData(ifstream&);
             ^
/home/NETID/ayevu105/HW5/customer.cpp:1:10: error: 'Customer.h' file not found [clang-diagnostic-error]
#include "Customer.h"
         ^~~~~~~~~~~~
/home/NETID/ayevu105/HW5/customer.h:2:10: error: 'Movie.h' file not found [clang-diagnostic-error]
#include "Movie.h"
         ^~~~~~~~~
/home/NETID/ayevu105/HW5/drama.cpp:1:10: error: 'Drama.h' file not found [clang-diagnostic-error]
#include "Drama.h"
         ^~~~~~~~~
/home/NETID/ayevu105/HW5/hashtable.cpp:2:10: error: 'Customer.h' file not found [clang-diagnostic-error]
#include "Customer.h"
         ^~~~~~~~~~~~
/home/NETID/ayevu105/HW5/history.cpp:3:10: error: 'History.h' file not found [clang-diagnostic-error]
#include "History.h"
         ^~~~~~~~~~~
/home/NETID/ayevu105/HW5/inventory.cpp:2:10: error: 'Inventory.h' file not found [clang-diagnostic-error]
#include "Inventory.h"
         ^~~~~~~~~~~~~
/home/NETID/ayevu105/HW5/movie.cpp:2:10: error: 'Movie.h' file not found [clang-diagnostic-error]
#include "Movie.h"
         ^~~~~~~~~
/home/NETID/ayevu105/HW5/return.cpp:2:10: error: 'Return.h' file not found [clang-diagnostic-error]
#include "Return.h"
         ^~~~~~~~~~
/home/NETID/ayevu105/HW5/store.cpp:1:10: error: 'Store.h' file not found [clang-diagnostic-error]
#include "Store.h"
         ^~~~~~~~~
/home/NETID/ayevu105/HW5/transaction.cpp:3:10: error: 'HashTable.h' file not found [clang-diagnostic-error]
#include "HashTable.h"
         ^~~~~~~~~~~~~
/home/NETID/ayevu105/HW5/transactionfactory.cpp:3:10: error: 'TransactionFactory.h' file not found [clang-diagnostic-error]
#include "TransactionFactory.h"
         ^~~~~~~~~~~~~~~~~~~~~~
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./borrow.cpp
9c9
< //borrow constructor
---
> // borrow constructor
11,12c11,12
<     customerID = 0;
<     titleMovie = nullptr;
---
>   customerID = 0;
>   titleMovie = nullptr;
15,18c15,18
< //initialized constructor
< Borrow::Borrow(Movie* Mov, int ID) {
<     customerID = ID;
<     titleMovie = Mov; 
---
> // initialized constructor
> Borrow::Borrow(Movie *Mov, int ID) {
>   customerID = ID;
>   titleMovie = Mov;
21,24c21,22
< //destructor
< Borrow::~Borrow() {
<     delete titleMovie;
< }
---
> // destructor
> Borrow::~Borrow() { delete titleMovie; }
26c24
< /* SetData sets the data from the commands file. 
---
> /* SetData sets the data from the commands file.
29,37c27,35
< bool Borrow::setData(ifstream& fileName) {
<     string genre;
<     fileName >> customerID >> mediaType >> genre; 
<     titleMovie = MovieFactory::create(genre);
<     if (titleMovie == nullptr) {
<         return false;
<     }
<     titleMovie->setTransactionData(fileName);
<     return true;
---
> bool Borrow::setData(ifstream &fileName) {
>   string genre;
>   fileName >> customerID >> mediaType >> genre;
>   titleMovie = MovieFactory::create(genre);
>   if (titleMovie == nullptr) {
>     return false;
>   }
>   titleMovie->setTransactionData(fileName);
>   return true;
41,63c39,59
< */
< void Borrow::doTransactionCommand(const vector<Movie*>& mov, 
<                                   const HashTable& customers) {
<     Customer* tempCustomer; 
<     tempCustomer = customers.GetItem(customerID);
<     if (tempCustomer == nullptr) {
<         cout << "Customer " << customerID << " not found!" << endl;
<     }
< 
<     Movie* temp = findMovie(mov, titleMovie); 
<     if(temp == nullptr) {
<         cout << "Movie " + titleMovie->transactionDisplay() << 
<         " not found!" <<endl;
<     }
< 
<     if (tempCustomer != nullptr && temp != nullptr) {
<         if (temp->getStockQuantity() > 0) {
<             tempCustomer->addTransactionHistory(this);
<             temp->DecrementStock();
<         }
<         else {
<             cout << "This movie has 0 stock." << endl;
<         }
---
>  */
> void Borrow::doTransactionCommand(const vector<Movie *> &mov,
>                                   const HashTable &customers) {
>   Customer *tempCustomer;
>   tempCustomer = customers.GetItem(customerID);
>   if (tempCustomer == nullptr) {
>     cout << "Customer " << customerID << " not found!" << endl;
>   }
> 
>   Movie *temp = findMovie(mov, titleMovie);
>   if (temp == nullptr) {
>     cout << "Movie " + titleMovie->transactionDisplay() << " not found!"
>          << endl;
>   }
> 
>   if (tempCustomer != nullptr && temp != nullptr) {
>     if (temp->getStockQuantity() > 0) {
>       tempCustomer->addTransactionHistory(this);
>       temp->DecrementStock();
>     } else {
>       cout << "This movie has 0 stock." << endl;
64a61
>   }
68c65
< */
---
>  */
70,71c67,68
<     cout << "Borrow: " << mediaType << " " << 
<     titleMovie->transactionDisplay() << endl;
---
>   cout << "Borrow: " << mediaType << " " << titleMovie->transactionDisplay()
>        << endl;
75,78c72,73
< */
< char Borrow::getCommand() const {
<   return command;
< }
---
>  */
> char Borrow::getCommand() const { return command; }
81,84c76,77
< */
< Movie* Borrow::getTitleMovie() const {
<   return titleMovie;
< }
---
>  */
> Movie *Borrow::getTitleMovie() const { return titleMovie; }
Running clang-format on ./classic.cpp
9,12c9,10
< //classic constructor
< Classic::Classic() {
<     Month = 0;
< }
---
> // classic constructor
> Classic::Classic() { Month = 0; }
14c12
< //destructor
---
> // destructor
19,21c17
< string Classic::getGenre() {
<     return Genre;
< }
---
> string Classic::getGenre() { return Genre; }
26,32c22,28
< bool Classic::setData(ifstream& FileName) {
<     string Temp;
<     FileName >> Stock >> Temp;
<     Movie::SetDataHelper(FileName);
<     FileName >> ActorFirstName >> ActorLastName >> Month >> Year;
<     InitialStock = Stock;
<     return true;
---
> bool Classic::setData(ifstream &FileName) {
>   string Temp;
>   FileName >> Stock >> Temp;
>   Movie::SetDataHelper(FileName);
>   FileName >> ActorFirstName >> ActorLastName >> Month >> Year;
>   InitialStock = Stock;
>   return true;
37,38c33,34
< void Classic::setTransactionData(ifstream& FileName) {
<     FileName >> Month >> Year >> ActorFirstName >> Year;
---
> void Classic::setTransactionData(ifstream &FileName) {
>   FileName >> Month >> Year >> ActorFirstName >> Year;
43,44c39,40
< bool Classic::operator<(const Movie& Movies) const{
<     const auto temp = dynamic_cast<const Classic&>(Movies);
---
> bool Classic::operator<(const Movie &Movies) const {
>   const auto temp = dynamic_cast<const Classic &>(Movies);
46,58c42,54
<     if (Year < temp.Year) {
<         return true;
<     }
<     if (Year == temp.Year && Month < temp.Month) {
<         return true;
<     }
<     if (Year == temp.Year && Month == temp.Month && 
<         ActorFirstName < temp.ActorFirstName) {
<         return true;
<     }
<     return (Year == temp.Year && Month == temp.Month && 
<             ActorFirstName == temp.ActorFirstName && 
<             ActorLastName < ActorFirstName);
---
>   if (Year < temp.Year) {
>     return true;
>   }
>   if (Year == temp.Year && Month < temp.Month) {
>     return true;
>   }
>   if (Year == temp.Year && Month == temp.Month &&
>       ActorFirstName < temp.ActorFirstName) {
>     return true;
>   }
>   return (Year == temp.Year && Month == temp.Month &&
>           ActorFirstName == temp.ActorFirstName &&
>           ActorLastName < ActorFirstName);
63,67c59,63
< bool Classic::operator==(const Movie& Movies) const{
<     const auto temp = dynamic_cast<const Classic&>(Movies);
<     return (ActorFirstName == temp.ActorFirstName && 
<             ActorLastName == temp.ActorLastName &&
<             Month == temp.Month && Year == temp.Year);
---
> bool Classic::operator==(const Movie &Movies) const {
>   const auto temp = dynamic_cast<const Classic &>(Movies);
>   return (ActorFirstName == temp.ActorFirstName &&
>           ActorLastName == temp.ActorLastName && Month == temp.Month &&
>           Year == temp.Year);
73,76c69,73
<     string Actor = ActorFirstName + " " + ActorLastName;
<     cout << left << setw(35) << Title << setw(19) << Director << setw(3) << 
<     Month << setw(5) << Year << setw(19) << Actor << "Borrowed: " << setw(3) 
<     << GetAmountBorrowed() << " " << "Remaining: " << Stock << endl;
---
>   string Actor = ActorFirstName + " " + ActorLastName;
>   cout << left << setw(35) << Title << setw(19) << Director << setw(3) << Month
>        << setw(5) << Year << setw(19) << Actor << "Borrowed: " << setw(3)
>        << GetAmountBorrowed() << " "
>        << "Remaining: " << Stock << endl;
82,87c79,84
<     auto Mon = to_string(Month);
<     auto Yea = to_string(Year);
<     string temp;
<     temp += Genre + " " + Mon + " " + Yea + " " + ActorFirstName + " " + 
<     ActorLastName;
<     return temp;
---
>   auto Mon = to_string(Month);
>   auto Yea = to_string(Year);
>   string temp;
>   temp += Genre + " " + Mon + " " + Yea + " " + ActorFirstName + " " +
>           ActorLastName;
>   return temp;
Running clang-format on ./comedy.cpp
9c9
< //comedy constructor
---
> // comedy constructor
12,18c12,18
< //initialized constructor
< Comedy::Comedy(int Stk, const string& Drtr, const string& Ttle, int Yea) {
<     Stock = Stk;
<     InitialStock = Stock;
<     Director = Drtr;
<     Title = Ttle;
<     Year = Yea;
---
> // initialized constructor
> Comedy::Comedy(int Stk, const string &Drtr, const string &Ttle, int Yea) {
>   Stock = Stk;
>   InitialStock = Stock;
>   Director = Drtr;
>   Title = Ttle;
>   Year = Yea;
21c21
< //destructor
---
> // destructor
26,28c26
< string Comedy::getGenre() {
<     return Genre;
< }
---
> string Comedy::getGenre() { return Genre; }
33,35c31,33
< void Comedy::SetTransactionData(ifstream& FileName) {
<     Movie::SetTitleHelper(FileName);
<     FileName >> Year;
---
> void Comedy::SetTransactionData(ifstream &FileName) {
>   Movie::SetTitleHelper(FileName);
>   FileName >> Year;
40,48c38,46
< bool Comedy::operator<(const Movie& Movies) const {
<     const auto temp = dynamic_cast<const Comedy&>(Movies);
<     if (Title < temp.Title) {
<         return true;
<     }
<     if (Title == temp.Title && Year < temp.Year) {
<         return true;
<     }
<     return false;
---
> bool Comedy::operator<(const Movie &Movies) const {
>   const auto temp = dynamic_cast<const Comedy &>(Movies);
>   if (Title < temp.Title) {
>     return true;
>   }
>   if (Title == temp.Title && Year < temp.Year) {
>     return true;
>   }
>   return false;
53,55c51,53
< bool Comedy::operator==(const Movie& Movies) const {
<     const auto temp = dynamic_cast<const Comedy&>(Movies);
<     return (Genre == temp.Genre && Title == temp.Title && Year == temp.Year);
---
> bool Comedy::operator==(const Movie &Movies) const {
>   const auto temp = dynamic_cast<const Comedy &>(Movies);
>   return (Genre == temp.Genre && Title == temp.Title && Year == temp.Year);
61,63c59,61
<     string temp;
<     temp += Genre + " " + Title + ", " + to_string(Year);
<     return temp;
---
>   string temp;
>   temp += Genre + " " + Title + ", " + to_string(Year);
>   return temp;
Running clang-format on ./customer.cpp
5,7c5,7
<     ID = 0;
<     FirstName = "";
<     LastName = "";
---
>   ID = 0;
>   FirstName = "";
>   LastName = "";
10,13c10,13
< Customer::~Customer(){
<     for (auto temp: History) {
<         delete temp;
<     }
---
> Customer::~Customer() {
>   for (auto temp : History) {
>     delete temp;
>   }
16,18c16
< int Customer::GetID() {
<     return ID;
< }
---
> int Customer::GetID() { return ID; }
20,21c18,19
< void Customer::AddTransactionHistory(Transaction* Trans){
<     History.push_back(Trans);
---
> void Customer::AddTransactionHistory(Transaction *Trans) {
>   History.push_back(Trans);
24,28c22,26
< void Customer::DisplayHistory(){
<     cout << "Customer: " << ID << " History" << endl;
<     for (auto temp: History) {
<         temp->Display();
<     }
---
> void Customer::DisplayHistory() {
>   cout << "Customer: " << ID << " History" << endl;
>   for (auto temp : History) {
>     temp->Display();
>   }
31,33c29,31
< bool Customer::SetData(ifstream& FileName) {
<     FileName >> ID >> LastName >> FirstName;
<     return (ID >= MINID && ID <= MAXID);
---
> bool Customer::SetData(ifstream &FileName) {
>   FileName >> ID >> LastName >> FirstName;
>   return (ID >= MINID && ID <= MAXID);
36,41c34,39
< bool Customer::isBorrowed(Movie* Mov) {
<     int Borrowed = 0;
<     int NotBorrowed = 0;
<     for (auto temp : History) {
<         if (temp->GetCommand() == 'B' &&
<             temp->GetTitleMovie()->TransactionDisplay() == 
---
> bool Customer::isBorrowed(Movie *Mov) {
>   int Borrowed = 0;
>   int NotBorrowed = 0;
>   for (auto temp : History) {
>     if (temp->GetCommand() == 'B' &&
>         temp->GetTitleMovie()->TransactionDisplay() ==
43,49c41,45
<             Borrowed++;
<         }
<         else if (temp->GetCommand() == 'R' &&
<                  temp->GetTitleMovie()->TransactionDisplay() == 
<                  Mov->TransactionDisplay()) {
<             NotBorrowed++;
<         }
---
>       Borrowed++;
>     } else if (temp->GetCommand() == 'R' &&
>                temp->GetTitleMovie()->TransactionDisplay() ==
>                    Mov->TransactionDisplay()) {
>       NotBorrowed++;
51c47,48
<     return NotBorrowed < Borrowed;
---
>   }
>   return NotBorrowed < Borrowed;
Running clang-format on ./drama.cpp
7,9c7
< string Drama::GetGenre() {
<     return Genre;
< }
---
> string Drama::GetGenre() { return Genre; }
11,12c9,10
< void Drama::SetTransactionData(ifstream& FileName) {
<     Movie::SetDataHelper(FileName);
---
> void Drama::SetTransactionData(ifstream &FileName) {
>   Movie::SetDataHelper(FileName);
15,20c13,18
< bool Drama::operator<(const Movie& Movies) const {
<     const auto temp = dynamic_cast<const Drama&>(Movies);
<     if (Director < temp.Director) {
<         return true;
<     }
<     return (Director == temp.Director && Title < temp.Title);
---
> bool Drama::operator<(const Movie &Movies) const {
>   const auto temp = dynamic_cast<const Drama &>(Movies);
>   if (Director < temp.Director) {
>     return true;
>   }
>   return (Director == temp.Director && Title < temp.Title);
23,26c21,24
< bool Drama::operator==(const Movie& Movies) const {
<     const auto temp = dynamic_cast<const Drama&>(Movies);
<     return (Genre == temp.Genre && Director == temp.Director && 
<             Title == temp.Title);
---
> bool Drama::operator==(const Movie &Movies) const {
>   const auto temp = dynamic_cast<const Drama &>(Movies);
>   return (Genre == temp.Genre && Director == temp.Director &&
>           Title == temp.Title);
29d26
< 
31,33c28,30
<     string temp;
<     temp += Genre + " " + Director + ", " + Title;
<     return temp;
---
>   string temp;
>   temp += Genre + " " + Director + ", " + Title;
>   return temp;
Running clang-format on ./hashtable.cpp
2d1
< #include "Customer.h"
3a3
> #include "Customer.h"
6,9c6,9
<     NumOfKeys = 0;
<     for (int I = 0; I < MAXENTRIES; I++) { 
<         Table[I] = nullptr;
<     }
---
>   NumOfKeys = 0;
>   for (int I = 0; I < MAXENTRIES; I++) {
>     Table[I] = nullptr;
>   }
12,14c12
< HashTable::~HashTable() {
<     clear();
< }
---
> HashTable::~HashTable() { clear(); }
16,27c14,25
< bool HashTable::Add(Customer* Cstmr) {
<     if (Cstmr->GetID() < MINID || Cstmr->GetID() > MAXID) {
<         return false;
<     }
<     if (Table[Hash(Cstmr->GetID())] != nullptr) {
<         cout << "Customer already exists" << endl;
<         delete Cstmr;
<         return false;
<     }
<     Table[Hash(Cstmr->GetID())] = Cstmr;
<     NumOfKeys++;
<     return true;
---
> bool HashTable::Add(Customer *Cstmr) {
>   if (Cstmr->GetID() < MINID || Cstmr->GetID() > MAXID) {
>     return false;
>   }
>   if (Table[Hash(Cstmr->GetID())] != nullptr) {
>     cout << "Customer already exists" << endl;
>     delete Cstmr;
>     return false;
>   }
>   Table[Hash(Cstmr->GetID())] = Cstmr;
>   NumOfKeys++;
>   return true;
30,32c28
< int HashTable::Hash(int Cstmr) const {
<   return Cstmr - 1000;
< }
---
> int HashTable::Hash(int Cstmr) const { return Cstmr - 1000; }
34,38c30,34
< Customer* HashTable::GetItem(int Cstmr) const {
<     if (Cstmr < MINID || Cstmr > MAXID) {
<         return nullptr;
<     }
<     return Table[Hash(Cstmr)];
---
> Customer *HashTable::GetItem(int Cstmr) const {
>   if (Cstmr < MINID || Cstmr > MAXID) {
>     return nullptr;
>   }
>   return Table[Hash(Cstmr)];
42,45c38,41
<     for (auto temp : Table) {
<         delete temp;
<     }
<     HashTable();
---
>   for (auto temp : Table) {
>     delete temp;
>   }
>   HashTable();
Running clang-format on ./history.cpp
5,7c5
< History::History() {
<     CustomerID = 0;
< }
---
> History::History() { CustomerID = 0; }
11,14c9,11
< bool History::SetData(ifstream& FileName)
< {
<     FileName >> CustomerID;
<     return true;
---
> bool History::SetData(ifstream &FileName) {
>   FileName >> CustomerID;
>   return true;
17,23c14,19
< void History::DoTransactionCommand(const vector<Movie*>&, 
<                                    const HashTable& Customers)
< {
<     Customer* C = Customers.GetItem(CustomerID);
<     if (C) {
<         C->DisplayHistory();
<     }
---
> void History::DoTransactionCommand(const vector<Movie *> &,
>                                    const HashTable &Customers) {
>   Customer *C = Customers.GetItem(CustomerID);
>   if (C) {
>     C->DisplayHistory();
>   }
28,31c24
< char History::GetCommand() const
< {
<   return Command;
< }
---
> char History::GetCommand() const { return Command; }
33,36c26
< Movie* History::getTitleMovie() const
< {
<   return nullptr;
< }
\ No newline at end of file
---
> Movie *History::getTitleMovie() const { return nullptr; }
\ No newline at end of file
Running clang-format on ./inventory.cpp
8,10c8
< bool Inventory::SetData(ifstream&) {
<   return true;
< }
---
> bool Inventory::SetData(ifstream &) { return true; }
12,13c10,11
< void Inventory::DoTransactionCommand(const vector<Movie*>&, const HashTable&) {
< }
---
> void Inventory::DoTransactionCommand(const vector<Movie *> &,
>                                      const HashTable &) {}
15,17c13
< char Inventory::GetCommand() const {
<   return Command;
< }
---
> char Inventory::GetCommand() const { return Command; }
21,23c17
< Movie* Inventory::getTitleMovie() const {
<   return nullptr;
< }
\ No newline at end of file
---
> Movie *Inventory::getTitleMovie() const { return nullptr; }
\ No newline at end of file
Running clang-format on ./main.cpp
Running clang-format on ./movie.cpp
5,7c5,7
<     Stock = 0;
<     InitialStock = 0;
<     Year = 0;
---
>   Stock = 0;
>   InitialStock = 0;
>   Year = 0;
12,14c12
< int Movie::getStockQuantity() const {
<     return Stock;
< }
---
> int Movie::getStockQuantity() const { return Stock; }
17,18c15,16
<     int BorrowAmount = InitialStock - Stock;
<     return BorrowAmount;
---
>   int BorrowAmount = InitialStock - Stock;
>   return BorrowAmount;
21,23c19
< int Movie::GetInitialStock() const {
<     return InitialStock;
< }
---
> int Movie::GetInitialStock() const { return InitialStock; }
25,27c21
< void Movie::IncramentStock() {
<     Stock++;
< }
---
> void Movie::IncramentStock() { Stock++; }
29,31c23
< void Movie::DecrementStock() {
<     Stock--;
< }
---
> void Movie::DecrementStock() { Stock--; }
33,35c25
< string Movie::GetGenre() {
<   return string();
< }
---
> string Movie::GetGenre() { return string(); }
37,43c27,33
< bool Movie::SetData(ifstream& FileName) {
<     string Temp;
<     FileName >> Stock >> Temp;
<     SetDataHelper(FileName);
<     FileName >> Year;
<     InitialStock = Stock;
<     return true;
---
> bool Movie::SetData(ifstream &FileName) {
>   string Temp;
>   FileName >> Stock >> Temp;
>   SetDataHelper(FileName);
>   FileName >> Year;
>   InitialStock = Stock;
>   return true;
46c36
< void Movie::SetTransactionData(ifstream&) {}
---
> void Movie::SetTransactionData(ifstream &) {}
48,50c38
< bool Movie::operator==(const Movie&) const {
<   return false;
< }
---
> bool Movie::operator==(const Movie &) const { return false; }
52,54c40
< bool Movie::operator<(const Movie&) const {
<   return false;
< }
---
> bool Movie::operator<(const Movie &) const { return false; }
56,58c42,44
< void Movie::SetDataHelper(ifstream& FileName) {
<     SetDirectorHelper(FileName);
<     SetTitleHelper(FileName);
---
> void Movie::SetDataHelper(ifstream &FileName) {
>   SetDirectorHelper(FileName);
>   SetTitleHelper(FileName);
61,69c47,55
< void Movie::SetDirectorHelper(ifstream& FileName) {
<     string Temp;
<     FileName >> Director;
<     while (Director.back() == ',') { 
<         FileName >> Temp;
<         Director += " ";
<         Director += Temp;
<     }
<     Director.pop_back();
---
> void Movie::SetDirectorHelper(ifstream &FileName) {
>   string Temp;
>   FileName >> Director;
>   while (Director.back() == ',') {
>     FileName >> Temp;
>     Director += " ";
>     Director += Temp;
>   }
>   Director.pop_back();
72,80c58,66
< void Movie::SetTitleHelper(ifstream& FileName) {
<     string Temp;
<     FileName >> Title;
<     while (Title.back() == ',') { 
<         FileName >> Temp;
<         Title += " ";
<         Title += Temp;
<     }
<     Title.pop_back();
---
> void Movie::SetTitleHelper(ifstream &FileName) {
>   string Temp;
>   FileName >> Title;
>   while (Title.back() == ',') {
>     FileName >> Temp;
>     Title += " ";
>     Title += Temp;
>   }
>   Title.pop_back();
84,86c70,73
<     cout << left << setw(35) << Title << setw(19) << Director << setw(5) <<
<     Year << " " << "Borrowed: " << setw(3) << GetAmountBorrowed() << " " <<
<     "Remaining: " << Stock << endl;
---
>   cout << left << setw(35) << Title << setw(19) << Director << setw(5) << Year
>        << " "
>        << "Borrowed: " << setw(3) << GetAmountBorrowed() << " "
>        << "Remaining: " << Stock << endl;
89,91c76
< string Movie::TransactionDisplay() const {
<   return string();
< }
\ No newline at end of file
---
> string Movie::TransactionDisplay() const { return string(); }
\ No newline at end of file
Running clang-format on ./return.cpp
5,6c5,6
<     CustomerID = 0;
<     TitleMovie = nullptr;
---
>   CustomerID = 0;
>   TitleMovie = nullptr;
9,37c9
< Return::~Return() {
<     delete TitleMovie;
< }
< 
< bool Return::SetData(ifstream& FileName)
< {
<     string Genre;
<     FileName >> CustomerID >> MediaType >> Genre; 
<     TitleMovie = MovieFactory::create(Genre);
<     if (!TitleMovie) {
<         return false;
<     }
<     TitleMovie->SetTransactionData(FileName);
<     return true;
< }
< 
< void Return::DoTransactionCommand(const vector<Movie*>& Mov, 
<                                   const HashTable& Customers) {
<     Customer* TempCustomer; 
<     TempCustomer = Customers.GetItem(CustomerID);
<     if (!TempCustomer) {
<         cout << "Customer " << CustomerID << " not found!" <<endl;
<     }
< 
<     Movie* Temp = FindMovie(Mov, TitleMovie); 
<     if(!Temp) {
<         cout << "Movie " + TitleMovie->TransactionDisplay() << 
<         " not found!" <<endl;
<     }
---
> Return::~Return() { delete TitleMovie; }
39,50c11,43
<     if (TempCustomer && Temp) {
<         if (TempCustomer->isBorrowed(Temp)) {
<             TempCustomer->AddTransactionHistory(this);
<             Temp->IncramentStock();
<         }
<         else { 
<             cout << Temp->TransactionDisplay() + 
<             " Customer did not borrow this movie!" << endl;
<         }
<     }
<     else {
<         cout << "Return Failed" << endl;
---
> bool Return::SetData(ifstream &FileName) {
>   string Genre;
>   FileName >> CustomerID >> MediaType >> Genre;
>   TitleMovie = MovieFactory::create(Genre);
>   if (!TitleMovie) {
>     return false;
>   }
>   TitleMovie->SetTransactionData(FileName);
>   return true;
> }
> 
> void Return::DoTransactionCommand(const vector<Movie *> &Mov,
>                                   const HashTable &Customers) {
>   Customer *TempCustomer;
>   TempCustomer = Customers.GetItem(CustomerID);
>   if (!TempCustomer) {
>     cout << "Customer " << CustomerID << " not found!" << endl;
>   }
> 
>   Movie *Temp = FindMovie(Mov, TitleMovie);
>   if (!Temp) {
>     cout << "Movie " + TitleMovie->TransactionDisplay() << " not found!"
>          << endl;
>   }
> 
>   if (TempCustomer && Temp) {
>     if (TempCustomer->isBorrowed(Temp)) {
>       TempCustomer->AddTransactionHistory(this);
>       Temp->IncramentStock();
>     } else {
>       cout << Temp->TransactionDisplay() +
>                   " Customer did not borrow this movie!"
>            << endl;
51a45,47
>   } else {
>     cout << "Return Failed" << endl;
>   }
55,56c51,52
<   cout << "Return: " << MediaType << " " << 
<   TitleMovie->TransactionDisplay() << endl;
---
>   cout << "Return: " << MediaType << " " << TitleMovie->TransactionDisplay()
>        << endl;
59,62c55
< char Return::GetCommand() const
< {
<   return Command;
< }
---
> char Return::GetCommand() const { return Command; }
64,67c57
< Movie* Return::getTitleMovie() const
< {
<   return TitleMovie;
< }
\ No newline at end of file
---
> Movie *Return::getTitleMovie() const { return TitleMovie; }
\ No newline at end of file
Running clang-format on ./store.cpp
6,125c6,97
<     while(!Commands.empty()) {
<         auto Temp = Commands.front();
<         Commands.pop(); 
<         delete Temp;
<     }
<     for (auto Funny : Comedy) {
<         delete Funny;
<     }
<     for (auto Dramas : Drama) {
<         delete Dramas;
<     }
<     for (auto Classics : Classic) {
<         delete Classics; 
<     }
< }
< 
< void Store::verifyMovie(ifstream& FileName) {
<     bool SRead = false;
<     Movie* Mov = nullptr;
<     string Genre;
<     cout << "Reading Movies" << endl;
< 
<     for (;;) {
<         FileName >> Genre;
<         if (FileName.eof()) {
<             break;
<         }
<         Genre.pop_back();
<         Mov = MovieFactory::create(Genre);
<         if (!Mov) {
<             lineDiscard(FileName);
<             continue;
<         }
<         SRead = Mov->SetData(FileName);
< 
<         if (SRead) {
<             addInv(Mov, Genre);
<         }
<         else {
<             delete Mov;
<         }
<     }
<     cout << "Finished Reading Movies" << endl;
< }
< 
< void Store::verifyCustomer(ifstream& FileName) {
<     bool SRead = false;
<     Customer* Cust = nullptr;
<     cout << "Reading Customers" << endl;
< 
<     for (;;) {
<         Cust = new Customer();
<         SRead = Cust->SetData(FileName);
<         if (FileName.eof()) {
<             delete Cust;
<             break;
<         }
< 
<         if (SRead) {
<             Customers.Add(Cust);
<         }
<         else {
<             delete Cust;
<             cout << "Invalid Customer ID" << endl;
<         }
<     }
<     cout << "Finished Reading Customers" << endl;
< }
< 
< void Store::verifyCommand(ifstream& FileName) {
<     string Type;
<     bool SRead = false;
<     Transaction* Trans = nullptr;
<     cout << "Reading Commands" << endl;
< 
<     for (;;) {
<         FileName >> Type;
<         if (FileName.eof()) {
<             break;
<         }
<         Trans = TransactionFactory::create(Type);
<         if (!Trans) {
<             lineDiscard(FileName);
<             continue;
<         }
<         SRead = Trans->SetData(FileName);
<         if (SRead) {
<             Commands.push(Trans);
<         }
<         else {
<             lineDiscard(FileName);
<             delete Trans;
<         }
<     }
<     cout << "Finished Reading Commands" << endl;
< }
< 
< bool Store::addInv(Movie* Mov, const string& MovieGenre) {
<     return addInvHelper(getInv(MovieGenre), Mov);
< }
< 
< bool Store::addInvHelper(vector<Movie*>& Container, Movie* Mov) {
<     if (Container.empty()) {
<         Container.push_back(Mov);
<         return true;
<     }
<     auto Iterator = Container.begin();
<     for (auto Temp : Container) { 
<         if (*Mov == *Temp) {
<             delete Mov;
<             return false;
<         }
<         if (*Mov < *Temp) {
<             Container.insert(Iterator, Mov);
<             return true;
<         }
<         Iterator++;
<     }
<     Container.push_back(Mov);
<     return true;
---
>   while (!Commands.empty()) {
>     auto Temp = Commands.front();
>     Commands.pop();
>     delete Temp;
>   }
>   for (auto Funny : Comedy) {
>     delete Funny;
>   }
>   for (auto Dramas : Drama) {
>     delete Dramas;
>   }
>   for (auto Classics : Classic) {
>     delete Classics;
>   }
> }
> 
> void Store::verifyMovie(ifstream &FileName) {
>   bool SRead = false;
>   Movie *Mov = nullptr;
>   string Genre;
>   cout << "Reading Movies" << endl;
> 
>   for (;;) {
>     FileName >> Genre;
>     if (FileName.eof()) {
>       break;
>     }
>     Genre.pop_back();
>     Mov = MovieFactory::create(Genre);
>     if (!Mov) {
>       lineDiscard(FileName);
>       continue;
>     }
>     SRead = Mov->SetData(FileName);
> 
>     if (SRead) {
>       addInv(Mov, Genre);
>     } else {
>       delete Mov;
>     }
>   }
>   cout << "Finished Reading Movies" << endl;
> }
> 
> void Store::verifyCustomer(ifstream &FileName) {
>   bool SRead = false;
>   Customer *Cust = nullptr;
>   cout << "Reading Customers" << endl;
> 
>   for (;;) {
>     Cust = new Customer();
>     SRead = Cust->SetData(FileName);
>     if (FileName.eof()) {
>       delete Cust;
>       break;
>     }
> 
>     if (SRead) {
>       Customers.Add(Cust);
>     } else {
>       delete Cust;
>       cout << "Invalid Customer ID" << endl;
>     }
>   }
>   cout << "Finished Reading Customers" << endl;
> }
> 
> void Store::verifyCommand(ifstream &FileName) {
>   string Type;
>   bool SRead = false;
>   Transaction *Trans = nullptr;
>   cout << "Reading Commands" << endl;
> 
>   for (;;) {
>     FileName >> Type;
>     if (FileName.eof()) {
>       break;
>     }
>     Trans = TransactionFactory::create(Type);
>     if (!Trans) {
>       lineDiscard(FileName);
>       continue;
>     }
>     SRead = Trans->SetData(FileName);
>     if (SRead) {
>       Commands.push(Trans);
>     } else {
>       lineDiscard(FileName);
>       delete Trans;
>     }
>   }
>   cout << "Finished Reading Commands" << endl;
128,130c100,101
< 
< void Store::lineDiscard(ifstream& FileName) {
<     FileName.ignore(1000, '\n');
---
> bool Store::addInv(Movie *Mov, const string &MovieGenre) {
>   return addInvHelper(getInv(MovieGenre), Mov);
133,143c104,137
< vector<Movie*>& Store::getInv(const string& MovieGenre) {
<     if (MovieGenre == "F") {
<         return Comedy;
<     }
<     if (MovieGenre == "D") {
<         return Drama;
<     }
<     if (MovieGenre == "C") {
<         return Classic;
<     }
<     return Temporary;
---
> bool Store::addInvHelper(vector<Movie *> &Container, Movie *Mov) {
>   if (Container.empty()) {
>     Container.push_back(Mov);
>     return true;
>   }
>   auto Iterator = Container.begin();
>   for (auto Temp : Container) {
>     if (*Mov == *Temp) {
>       delete Mov;
>       return false;
>     }
>     if (*Mov < *Temp) {
>       Container.insert(Iterator, Mov);
>       return true;
>     }
>     Iterator++;
>   }
>   Container.push_back(Mov);
>   return true;
> }
> 
> void Store::lineDiscard(ifstream &FileName) { FileName.ignore(1000, '\n'); }
> 
> vector<Movie *> &Store::getInv(const string &MovieGenre) {
>   if (MovieGenre == "F") {
>     return Comedy;
>   }
>   if (MovieGenre == "D") {
>     return Drama;
>   }
>   if (MovieGenre == "C") {
>     return Classic;
>   }
>   return Temporary;
146,148c140
< HashTable& Store::getCustomers() {
<     return Customers;
< }
---
> HashTable &Store::getCustomers() { return Customers; }
151,185c143,176
<     cout << " ------------------------------------------" << endl;
<     cout << "Comedies: " << endl;
<     for (auto Funny : Comedy) {
<         Funny->Display();
<     }
<     cout << " ------------------------------------------" << endl;
<     cout << "Dramas: " << endl;
<     for (auto Dramas : Drama) {
<         Dramas->Display();
<     }
<     cout << " ------------------------------------------" << endl;
<     cout << "Classic: " << endl;
<     for (auto Classics : Classic) {
<         Classics->Display();
<     }
<     cout << " ------------------------------------------" << endl;
< }
< 
< bool Store::storeBuilder(const string& MovieFile, const string& CustomerFile, 
<                          const string& CommandFile) {
<     cout << "BUILD STORE" << endl;
<     ifstream MFile(MovieFile);
<     ifstream CFile(CustomerFile);
<     ifstream ComFile(CommandFile);
< 
<     if (!MFile || !CFile || !ComFile) {
<         cout << "Files not found" << endl;
<         return false;
<     }
<     verifyMovie(MFile);
<     verifyCustomer(CFile);
<     verifyCommand(ComFile);
<     cout << "Store Built -- Done" << endl;
<     return true;
< 
---
>   cout << " ------------------------------------------" << endl;
>   cout << "Comedies: " << endl;
>   for (auto Funny : Comedy) {
>     Funny->Display();
>   }
>   cout << " ------------------------------------------" << endl;
>   cout << "Dramas: " << endl;
>   for (auto Dramas : Drama) {
>     Dramas->Display();
>   }
>   cout << " ------------------------------------------" << endl;
>   cout << "Classic: " << endl;
>   for (auto Classics : Classic) {
>     Classics->Display();
>   }
>   cout << " ------------------------------------------" << endl;
> }
> 
> bool Store::storeBuilder(const string &MovieFile, const string &CustomerFile,
>                          const string &CommandFile) {
>   cout << "BUILD STORE" << endl;
>   ifstream MFile(MovieFile);
>   ifstream CFile(CustomerFile);
>   ifstream ComFile(CommandFile);
> 
>   if (!MFile || !CFile || !ComFile) {
>     cout << "Files not found" << endl;
>     return false;
>   }
>   verifyMovie(MFile);
>   verifyCustomer(CFile);
>   verifyCommand(ComFile);
>   cout << "Store Built -- Done" << endl;
>   return true;
189,206c180,193
<     cout << "Begin Executing Command" << endl;
<     while(!Commands.empty()) {
<         auto Temp = Commands.front();
<         Commands.pop();
<         char C = Temp->GetCommand();
<         if (C == 'I') {
<             displayInv();
<             delete Temp;
<         }
<         else if (C == 'H') {
<             Temp->DoTransactionCommand(Temporary, Customers);
<             delete Temp;
<         }
<         else {
<             Temp->DoTransactionCommand(getInv(
<             Temp->GetTitleMovie()->GetGenre()), Customers);
<         }
<     cout << "Finished Execution" << endl;
---
>   cout << "Begin Executing Command" << endl;
>   while (!Commands.empty()) {
>     auto Temp = Commands.front();
>     Commands.pop();
>     char C = Temp->GetCommand();
>     if (C == 'I') {
>       displayInv();
>       delete Temp;
>     } else if (C == 'H') {
>       Temp->DoTransactionCommand(Temporary, Customers);
>       delete Temp;
>     } else {
>       Temp->DoTransactionCommand(getInv(Temp->GetTitleMovie()->GetGenre()),
>                                  Customers);
207a195,196
>     cout << "Finished Execution" << endl;
>   }
Running clang-format on ./store_test.cpp
1a2,3
> #include <cassert>
> #include <fstream>
5,6d6
< #include <fstream>
< #include <cassert>
Running clang-format on ./storetest.cpp
1a2,3
> #include <cassert>
> #include <fstream>
5,6d6
< #include <fstream>
< #include <cassert>
Running clang-format on ./transaction.cpp
3d2
< #include "HashTable.h"
4a4
> #include "HashTable.h"
10,12c10
< bool Transaction::SetData(ifstream&) {
<   return false;
< }
---
> bool Transaction::SetData(ifstream &) { return false; }
14,15c12,13
< void Transaction::DoTransactionCommand(const vector<Movie*>&, 
<                                        const HashTable&) {}
---
> void Transaction::DoTransactionCommand(const vector<Movie *> &,
>                                        const HashTable &) {}
19,32c17,26
< char Transaction::GetCommand() const {
<     return ' ';
< }
< 
< Movie* Transaction::GetTitleMovie() const {
<     return nullptr;
< }
< 
< Movie* Transaction::findMovie(const vector<Movie*>& Mov, Movie* Target) const {
<     for (auto I : Mov)
<         if (*Target == *I) {
<             return I;
<         }
<     return nullptr;
---
> char Transaction::GetCommand() const { return ' '; }
> 
> Movie *Transaction::GetTitleMovie() const { return nullptr; }
> 
> Movie *Transaction::findMovie(const vector<Movie *> &Mov, Movie *Target) const {
>   for (auto I : Mov)
>     if (*Target == *I) {
>       return I;
>     }
>   return nullptr;
Running clang-format on ./transactionfactory.cpp
9,23c9,23
< Transaction* TransactionFactory::create(const string& TransactionType) {
<     if (TransactionType == "B") { 
<         return new Borrow();
<     }
<     if (TransactionType == "R") { 
<         return new Return();
<     }
<     if (TransactionType == "H") { 
<         return new History();
<     }
<     if (TransactionType == "I") { 
<         return new Inventory();
<     }
<     cout << "Invalid command!" << endl;
<     return nullptr;
---
> Transaction *TransactionFactory::create(const string &TransactionType) {
>   if (TransactionType == "B") {
>     return new Borrow();
>   }
>   if (TransactionType == "R") {
>     return new Return();
>   }
>   if (TransactionType == "H") {
>     return new History();
>   }
>   if (TransactionType == "I") {
>     return new Inventory();
>   }
>   cout << "Invalid command!" << endl;
>   return nullptr;
=====================================================
5. No memory leaks using g++
=====================================================
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
=====================================================
7. Tests have full code coverage
=====================================================
Sun Dec  4 14:13:46 PST 2022
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
